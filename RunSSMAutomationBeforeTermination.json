{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "AutoScalingGN": {
            "Type": "String",
            "Description": "(Required) Enter the name of the AutoScalingGroup."
        },
        "DomainUserName": {
            "Type": "String",
            "Description": "(Required) The name of the string Parameter for the DomainUser. The user would need to have enough permissions to remove the computer from the domain."
        },
        "DomainPassword": {
            "Type": "String",
            "NoEcho" : "true",
            "Description": "(Required) The name of the Secure Parameter that have the password of DomainUserName."
        },
        "ExistingAutomationAssumeRole": {
            "Type": "String",
            "Description": "(Optional) The ARN of the role that allows AWS Systems Manager Automation execution to perform the actions in the document. If not specified, the template will create a rule with minimum permissions."
        },
        "ExistingCloudWatchEventRole": {
            "Type": "String",
            "Description": "(Optional) The Role ARN to be used by CloudWatch event to trigger the AWS Systems Manager Automation execution.If not specified, the template will create a rule with minimum permissions."
        }
    },
    "Conditions": {
        "CreateCloudWatchEventRoleCondition": {
            "Fn::Equals": [
                {
                    "Ref": "ExistingCloudWatchEventRole"
                },
                ""
            ]
        },
        "CreateAutomationAssumeRoleCondition": {
            "Fn::Equals": [
                {
                    "Ref": "ExistingAutomationAssumeRole"
                },
                ""
            ]
        }
    },
    "Resources": {
        "CloudWatchEventRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "CreateCloudWatchEventRoleCondition",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "events.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:StartAutomationExecution"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMAutomationDocument}:$DEFAULT"
                                    }
                                }
                            ]
                        },
                        "PolicyName": "Start-SSM-Automation-Policy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": {
                                        "Fn::If": [
                                            "CreateAutomationAssumeRoleCondition",
                                            {
                                                "Fn::GetAtt": [
                                                    "AutomationAssumeRole",
                                                    "Arn"
                                                ]
                                            },
                                            {
                                                "Ref": "ExistingAutomationAssumeRole"
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "Pass-Role-SSM-Automation-Policy"
                    }
                ]
            }
        },
        "AutomationAssumeRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "CreateAutomationAssumeRoleCondition",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ssm.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateImage",
                                        "ec2:DescribeImages",
                                        "ssm:DescribeInstanceInformation",
                                        "ssm:ListCommands",
                                        "ssm:ListCommandInvocations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:SendCommand"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunPowerShellScript"
                                    }
                                },
                                {
                                    "Action": [
                                        "ssm:SendCommand"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:ec2:*:*:instance/*"
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "SSM-Automation-Policy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:CompleteLifecycleAction"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGN}"
                                    }
                                }
                            ]
                        },
                        "PolicyName": "SSM-Automation-Permission-to-CompleteLifecycle-Policy"
                    }
                ]
            }
        },
        "CreateLifeCycleHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGN"
                },
                "DefaultResult": "CONTINUE",
                "HeartbeatTimeout": 7200,
                "LifecycleHookName": "LCH_EC2_INSTANCE_TERMINATING",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING"
            }
        },
        "SSMAutomationDocument": {
            "Type": "AWS::SSM::Document",
            "Properties": {
                "DocumentType": "Automation",
                "Content": {
                    "schemaVersion": "0.3",
                    "assumeRole": "{{AutomationAssumeRole}}",
                    "description": "This Document Created as part of CloudFormation stack named. This document will disjoin instances From an Active Directory, create an AMI of the instance, send a signal to the LifeCycleHook to terminate the instance",
                    "parameters": {
                        "InstanceId": {
                            "type": "String"
                        },
                        "ASGName": {
                            "type": "String",
                            "default": {
                                "Ref": "AutoScalingGN"
                            },
                            "description": "The name of the AutoScaling Group."
                        },
                        "LCHName": {
                            "type": "String",
                            "default": "LCH_EC2_INSTANCE_TERMINATING",
                            "description": "The name of the Life Cycle Hook."
                        },
                        "DomainAdminUserName": {
                            "type": "String",
                            "default": {
                                "Ref": "DomainUserName"
                            },
                            "description": "The name of the String Parameter for the domain user. The user would need to have enough permissions to remove the computer from the domain."
                        },
                        "DomainAdminPassword": {
                            "type": "String",
                            "default": {
                                "Ref": "DomainPassword"
                            },
                            "description": "The name of the SecureString Parameter that have the password of DomainUserName"
                        },
                        "AutomationAssumeRole": {
                            "type": "String",
                            "default": {
                                "Fn::If": [
                                    "CreateAutomationAssumeRoleCondition",
                                    {
                                        "Fn::GetAtt": [
                                            "AutomationAssumeRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Ref": "ExistingAutomationAssumeRole"
                                    }
                                ]
                            },
                            "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf."
                        }
                    },
                    "mainSteps": [
                        {
                            "name": "RunCommand",
                            "action": "aws:runCommand",
                            "inputs": {
                                "DocumentName": "AWS-RunPowerShellScript",
                                "InstanceIds": [
                                    "{{ InstanceId }}"
                                ],
                                "Parameters": {
                                    "executionTimeout": "7200",
                                    "commands": [
                                        "$name = $env:computerName",
                                        "$PartOfDomain = (Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain",
                                        "if($PartOfDomain -eq $true){",
                                        "$username = (Get-SSMParameterValue -Name {{DomainAdminUserName}}).Parameters[0].Value",
                                        "$password = (Get-SSMParameterValue -Name {{DomainAdminPassword}} -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force",
                                        "$credential = New-Object System.Management.Automation.PSCredential($username,$password)",
                                        "Write-Output \"Removing computer $name from the domain\"",
                                        "Remove-Computer -ComputerName $name -Credential $credential -PassThru -Restart -Force}",
                                        "else{",
                                        "Write-Output \"Cannot remove computer $name because it is not in a domain\"}"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "createAMI",
                            "action": "aws:createImage",
                            "inputs": {
                                "InstanceId": "{{ InstanceId }}",
                                "ImageName": "{{ InstanceId }}_{{automation:EXECUTION_ID}}",
                                "NoReboot": true,
                                "ImageDescription": "My newly created AMI - ASGName: {{ ASGName }}"
                            }
                        },
                        {
                            "name": "TerminateTheInstance",
                            "action": "aws:executeAwsApi",
                            "inputs": {
                                "Service": "autoscaling",
                                "Api": "CompleteLifecycleAction",
                                "AutoScalingGroupName": "{{ ASGName }}",
                                "InstanceId": "{{ InstanceId }}",
                                "LifecycleActionResult": "CONTINUE",
                                "LifecycleHookName": "{{ LCHName }}"
                            }
                        }
                    ],
                    "outputs": [
                        "createAMI.ImageId"
                    ]
                }
            }
        },
        "CreateCloudWatchEvent": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "CloudWatch Event rule that will trigger AWS Systems Manager Automation document when an instance go in Terminate:wait. This is created as a part of a CloudFormation.",
                "EventPattern": {
                    "source": [
                        "aws.autoscaling"
                    ],
                    "detail-type": [
                        "EC2 Instance-terminate Lifecycle Action"
                    ],
                    "detail": {
                        "AutoScalingGroupName": [
                            {
                                "Ref": "AutoScalingGN"
                            }
                        ]
                    }
                },
                "Name": "RunSSMAutomationforAutoScalingBeforeTermination",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMAutomationDocument}:$DEFAULT"
                        },
                        "RoleArn": {
                            "Fn::If": [
                                "CreateCloudWatchEventRoleCondition",
                                {
                                    "Fn::GetAtt": [
                                        "CloudWatchEventRole",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Ref": "ExistingCloudWatchEventRole"
                                }
                            ]
                        },
                        "Id": "TargetFunctionV1",
                        "InputTransformer": {
                            "InputPathsMap": {
                                "instanceid": "$.detail.EC2InstanceId"
                            },
                            "InputTemplate": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "{\"InstanceId\":[<instanceid>]}"
                                    ]
                                ]
                            }
                        }
                    }
                ]
            }
        }
    }
}